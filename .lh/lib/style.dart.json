{
    "sourceFile": "lib/style.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1720995828292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720996242136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-import 'dart:ui';\n-\n import 'package:flutter/material.dart';\n import 'package:flutter_html/flutter_html.dart';\n import 'package:flutter_html/src/css_parser.dart';\n \n"
                },
                {
                    "date": 1720996281799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n     }\n   }\n \n   static Map<String, Style> fromThemeData(ThemeData theme) => {\n-        'h1': Style.fromTextStyle(theme.textTheme.headline1!),\n+        'h1': Style.fromTextStyle(theme.textTheme.displayLarge!),\n         'h2': Style.fromTextStyle(theme.textTheme.displayMedium!),\n         'h3': Style.fromTextStyle(theme.textTheme.displaySmall!),\n         'h4': Style.fromTextStyle(theme.textTheme.headlineMedium!),\n         'h5': Style.fromTextStyle(theme.textTheme.headlineSmall!),\n"
                },
                {
                    "date": 1720996295085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n   }\n \n   static Map<String, Style> fromThemeData(ThemeData theme) => {\n         'h1': Style.fromTextStyle(theme.textTheme.displayLarge!),\n-        'h2': Style.fromTextStyle(theme.textTheme.headline2!),\n+        'h2': Style.fromTextStyle(theme.textTheme.displayMedium!),\n         'h3': Style.fromTextStyle(theme.textTheme.displaySmall!),\n         'h4': Style.fromTextStyle(theme.textTheme.headlineMedium!),\n         'h5': Style.fromTextStyle(theme.textTheme.headlineSmall!),\n         'h6': Style.fromTextStyle(theme.textTheme.titleLarge!),\n"
                }
            ],
            "date": 1720995828292,
            "name": "Commit-0",
            "content": "import 'dart:ui';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_html/flutter_html.dart';\nimport 'package:flutter_html/src/css_parser.dart';\n\n//Export Style value-unit APIs\nexport 'package:flutter_html/src/style/margin.dart';\nexport 'package:flutter_html/src/style/length.dart';\nexport 'package:flutter_html/src/style/size.dart';\nexport 'package:flutter_html/src/style/fontsize.dart';\nexport 'package:flutter_html/src/style/lineheight.dart';\n\n///This class represents all the available CSS attributes\n///for this package.\nclass Style {\n  /// CSS attribute \"`background-color`\"\n  ///\n  /// Inherited: no,\n  /// Default: Colors.transparent,\n  Color? backgroundColor;\n\n  /// CSS attribute \"`color`\"\n  ///\n  /// Inherited: yes,\n  /// Default: unspecified,\n  Color? color;\n\n  /// CSS attribute \"`direction`\"\n  ///\n  /// Inherited: yes,\n  /// Default: TextDirection.ltr,\n  TextDirection? direction;\n\n  /// CSS attribute \"`display`\"\n  ///\n  /// Inherited: no,\n  /// Default: unspecified,\n  Display? display;\n\n  /// CSS attribute \"`font-family`\"\n  ///\n  /// Inherited: yes,\n  /// Default: Theme.of(context).style.textTheme.body1.fontFamily\n  String? fontFamily;\n\n  /// The list of font families to fall back on when a glyph cannot be found in default font family.\n  ///\n  /// Inherited: yes,\n  /// Default: null\n  List<String>? fontFamilyFallback;\n\n  /// CSS attribute \"`font-feature-settings`\"\n  ///\n  /// Inherited: yes,\n  /// Default: normal\n  List<FontFeature>? fontFeatureSettings;\n\n  /// CSS attribute \"`font-size`\"\n  ///\n  /// Inherited: yes,\n  /// Default: FontSize.medium\n  FontSize? fontSize;\n\n  /// CSS attribute \"`font-style`\"\n  ///\n  /// Inherited: yes,\n  /// Default: FontStyle.normal,\n  FontStyle? fontStyle;\n\n  /// CSS attribute \"`font-weight`\"\n  ///\n  /// Inherited: yes,\n  /// Default: FontWeight.normal,\n  FontWeight? fontWeight;\n\n  /// CSS attribute \"`height`\"\n  ///\n  /// Inherited: no,\n  /// Default: Height.auto(),\n  Height? height;\n\n  /// CSS attribute \"`letter-spacing`\"\n  ///\n  /// Inherited: yes,\n  /// Default: normal (0),\n  double? letterSpacing;\n\n  /// CSS attribute \"`list-style-type`\"\n  ///\n  /// Inherited: yes,\n  /// Default: ListStyleType.DISC\n  ListStyleType? listStyleType;\n\n  /// CSS attribute \"`list-style-position`\"\n  ///\n  /// Inherited: yes,\n  /// Default: ListStylePosition.OUTSIDE\n  ListStylePosition? listStylePosition;\n\n  /// CSS attribute \"`padding`\"\n  ///\n  /// Inherited: no,\n  /// Default: EdgeInsets.zero\n  EdgeInsets? padding;\n\n  /// CSS attribute \"`margin`\"\n  ///\n  /// Inherited: no,\n  /// Default: EdgeInsets.zero\n  Margins? margin;\n\n  /// CSS attribute \"`text-align`\"\n  ///\n  /// Inherited: yes,\n  /// Default: TextAlign.start,\n  TextAlign? textAlign;\n\n  /// CSS attribute \"`text-decoration`\"\n  ///\n  /// Inherited: no,\n  /// Default: TextDecoration.none,\n  TextDecoration? textDecoration;\n\n  /// CSS attribute \"`text-decoration-color`\"\n  ///\n  /// Inherited: no,\n  /// Default: Current color\n  Color? textDecorationColor;\n\n  /// CSS attribute \"`text-decoration-style`\"\n  ///\n  /// Inherited: no,\n  /// Default: TextDecorationStyle.solid,\n  TextDecorationStyle? textDecorationStyle;\n\n  /// Loosely based on CSS attribute \"`text-decoration-thickness`\"\n  ///\n  /// Uses a percent modifier based on the font size.\n  ///\n  /// Inherited: no,\n  /// Default: 1.0 (specified by font size)\n  // TODO(Sub6Resources): Possibly base this more closely on the CSS attribute.\n  double? textDecorationThickness;\n\n  /// CSS attribute \"`text-shadow`\"\n  ///\n  /// Inherited: yes,\n  /// Default: none,\n  List<Shadow>? textShadow;\n\n  /// CSS attribute \"`vertical-align`\"\n  ///\n  /// Inherited: no,\n  /// Default: VerticalAlign.BASELINE,\n  VerticalAlign? verticalAlign;\n\n  /// CSS attribute \"`white-space`\"\n  ///\n  /// Inherited: yes,\n  /// Default: WhiteSpace.NORMAL,\n  WhiteSpace? whiteSpace;\n\n  /// CSS attribute \"`width`\"\n  ///\n  /// Inherited: no,\n  /// Default: Width.auto()\n  Width? width;\n\n  /// CSS attribute \"`word-spacing`\"\n  ///\n  /// Inherited: yes,\n  /// Default: normal (0)\n  double? wordSpacing;\n\n  /// CSS attribute \"`line-height`\"\n  ///\n  /// Supported values: double values\n  ///\n  /// Unsupported values: normal, 80%, ..\n  ///\n  /// Inherited: no,\n  /// Default: Unspecified (null),\n  LineHeight? lineHeight;\n\n  //TODO modify these to match CSS styles\n  String? before;\n  String? after;\n  Border? border;\n  Alignment? alignment;\n  Widget? markerContent;\n\n  /// MaxLine\n  ///\n  ///\n  ///\n  ///\n  int? maxLines;\n\n  /// TextOverflow\n  ///\n  ///\n  ///\n  ///\n  TextOverflow? textOverflow;\n\n  TextTransform? textTransform;\n\n  Style({\n    this.backgroundColor = Colors.transparent,\n    this.color,\n    this.direction,\n    this.display,\n    this.fontFamily,\n    this.fontFamilyFallback,\n    this.fontFeatureSettings,\n    this.fontSize,\n    this.fontStyle,\n    this.fontWeight,\n    this.height,\n    this.lineHeight,\n    this.letterSpacing,\n    this.listStyleType,\n    this.listStylePosition,\n    this.padding,\n    this.margin,\n    this.textAlign,\n    this.textDecoration,\n    this.textDecorationColor,\n    this.textDecorationStyle,\n    this.textDecorationThickness,\n    this.textShadow,\n    this.verticalAlign,\n    this.whiteSpace,\n    this.width,\n    this.wordSpacing,\n    this.before,\n    this.after,\n    this.border,\n    this.alignment,\n    this.markerContent,\n    this.maxLines,\n    this.textOverflow,\n    this.textTransform = TextTransform.none,\n  }) {\n    if (alignment == null &&\n        (display == Display.block || display == Display.listItem)) {\n      alignment = Alignment.centerLeft;\n    }\n  }\n\n  static Map<String, Style> fromThemeData(ThemeData theme) => {\n        'h1': Style.fromTextStyle(theme.textTheme.displayLarge!),\n        'h2': Style.fromTextStyle(theme.textTheme.displayMedium!),\n        'h3': Style.fromTextStyle(theme.textTheme.displaySmall!),\n        'h4': Style.fromTextStyle(theme.textTheme.headlineMedium!),\n        'h5': Style.fromTextStyle(theme.textTheme.headlineSmall!),\n        'h6': Style.fromTextStyle(theme.textTheme.titleLarge!),\n        'body': Style.fromTextStyle(theme.textTheme.bodyMedium!),\n      };\n\n  static Map<String, Style> fromCss(\n      String css, OnCssParseError? onCssParseError) {\n    final declarations = parseExternalCss(css, onCssParseError);\n    Map<String, Style> styleMap = {};\n    declarations.forEach((key, value) {\n      styleMap[key] = declarationsToStyle(value);\n    });\n    return styleMap;\n  }\n\n  TextStyle generateTextStyle() {\n    return TextStyle(\n      backgroundColor: backgroundColor,\n      color: color,\n      decoration: textDecoration,\n      decorationColor: textDecorationColor,\n      decorationStyle: textDecorationStyle,\n      decorationThickness: textDecorationThickness,\n      fontFamily: fontFamily,\n      fontFamilyFallback: fontFamilyFallback,\n      fontFeatures: fontFeatureSettings,\n      fontSize: fontSize?.value,\n      fontStyle: fontStyle,\n      fontWeight: fontWeight,\n      letterSpacing: letterSpacing,\n      shadows: textShadow,\n      wordSpacing: wordSpacing,\n      height: lineHeight?.size ?? 1.0,\n      //TODO background\n      //TODO textBaseline\n    );\n  }\n\n  @override\n  String toString() {\n    return \"Style\";\n  }\n\n  Style merge(Style other) {\n    return copyWith(\n      backgroundColor: other.backgroundColor,\n      color: other.color,\n      direction: other.direction,\n      display: other.display,\n      fontFamily: other.fontFamily,\n      fontFamilyFallback: other.fontFamilyFallback,\n      fontFeatureSettings: other.fontFeatureSettings,\n      fontSize: other.fontSize,\n      fontStyle: other.fontStyle,\n      fontWeight: other.fontWeight,\n      height: other.height,\n      lineHeight: other.lineHeight,\n      letterSpacing: other.letterSpacing,\n      listStyleType: other.listStyleType,\n      listStylePosition: other.listStylePosition,\n      padding: other.padding,\n      //TODO merge EdgeInsets\n      margin: other.margin,\n      //TODO merge Margins\n      textAlign: other.textAlign,\n      textDecoration: other.textDecoration,\n      textDecorationColor: other.textDecorationColor,\n      textDecorationStyle: other.textDecorationStyle,\n      textDecorationThickness: other.textDecorationThickness,\n      textShadow: other.textShadow,\n      verticalAlign: other.verticalAlign,\n      whiteSpace: other.whiteSpace,\n      width: other.width,\n      wordSpacing: other.wordSpacing,\n\n      before: other.before,\n      after: other.after,\n      border: other.border,\n      //TODO merge border\n      alignment: other.alignment,\n      markerContent: other.markerContent,\n      maxLines: other.maxLines,\n      textOverflow: other.textOverflow,\n      textTransform: other.textTransform,\n    );\n  }\n\n  Style copyOnlyInherited(Style child) {\n    FontSize? finalFontSize = FontSize.inherit(fontSize, child.fontSize);\n\n    LineHeight? finalLineHeight = child.lineHeight != null\n        ? child.lineHeight?.units == \"length\"\n            ? LineHeight(child.lineHeight!.size! /\n                (finalFontSize == null ? 14 : finalFontSize.value) *\n                1.2)\n            : child.lineHeight\n        : lineHeight;\n\n    return child.copyWith(\n      backgroundColor: child.backgroundColor != Colors.transparent\n          ? child.backgroundColor\n          : backgroundColor,\n      color: child.color ?? color,\n      direction: child.direction ?? direction,\n      display: display == Display.none ? display : child.display,\n      fontFamily: child.fontFamily ?? fontFamily,\n      fontFamilyFallback: child.fontFamilyFallback ?? fontFamilyFallback,\n      fontFeatureSettings: child.fontFeatureSettings ?? fontFeatureSettings,\n      fontSize: finalFontSize,\n      fontStyle: child.fontStyle ?? fontStyle,\n      fontWeight: child.fontWeight ?? fontWeight,\n      lineHeight: finalLineHeight,\n      letterSpacing: child.letterSpacing ?? letterSpacing,\n      listStyleType: child.listStyleType ?? listStyleType,\n      listStylePosition: child.listStylePosition ?? listStylePosition,\n      textAlign: child.textAlign ?? textAlign,\n      textDecoration: TextDecoration.combine([\n        child.textDecoration ?? TextDecoration.none,\n        textDecoration ?? TextDecoration.none,\n      ]),\n      textShadow: child.textShadow ?? textShadow,\n      whiteSpace: child.whiteSpace ?? whiteSpace,\n      wordSpacing: child.wordSpacing ?? wordSpacing,\n      maxLines: child.maxLines ?? maxLines,\n      textOverflow: child.textOverflow ?? textOverflow,\n      textTransform: child.textTransform ?? textTransform,\n    );\n  }\n\n  Style copyWith({\n    Color? backgroundColor,\n    Color? color,\n    TextDirection? direction,\n    Display? display,\n    String? fontFamily,\n    List<String>? fontFamilyFallback,\n    List<FontFeature>? fontFeatureSettings,\n    FontSize? fontSize,\n    FontStyle? fontStyle,\n    FontWeight? fontWeight,\n    Height? height,\n    LineHeight? lineHeight,\n    double? letterSpacing,\n    ListStyleType? listStyleType,\n    ListStylePosition? listStylePosition,\n    EdgeInsets? padding,\n    Margins? margin,\n    TextAlign? textAlign,\n    TextDecoration? textDecoration,\n    Color? textDecorationColor,\n    TextDecorationStyle? textDecorationStyle,\n    double? textDecorationThickness,\n    List<Shadow>? textShadow,\n    VerticalAlign? verticalAlign,\n    WhiteSpace? whiteSpace,\n    Width? width,\n    double? wordSpacing,\n    String? before,\n    String? after,\n    Border? border,\n    Alignment? alignment,\n    Widget? markerContent,\n    int? maxLines,\n    TextOverflow? textOverflow,\n    TextTransform? textTransform,\n    bool? beforeAfterNull,\n  }) {\n    return Style(\n      backgroundColor: backgroundColor ?? this.backgroundColor,\n      color: color ?? this.color,\n      direction: direction ?? this.direction,\n      display: display ?? this.display,\n      fontFamily: fontFamily ?? this.fontFamily,\n      fontFamilyFallback: fontFamilyFallback ?? this.fontFamilyFallback,\n      fontFeatureSettings: fontFeatureSettings ?? this.fontFeatureSettings,\n      fontSize: fontSize ?? this.fontSize,\n      fontStyle: fontStyle ?? this.fontStyle,\n      fontWeight: fontWeight ?? this.fontWeight,\n      height: height ?? this.height,\n      lineHeight: lineHeight ?? this.lineHeight,\n      letterSpacing: letterSpacing ?? this.letterSpacing,\n      listStyleType: listStyleType ?? this.listStyleType,\n      listStylePosition: listStylePosition ?? this.listStylePosition,\n      padding: padding ?? this.padding,\n      margin: margin ?? this.margin,\n      textAlign: textAlign ?? this.textAlign,\n      textDecoration: textDecoration ?? this.textDecoration,\n      textDecorationColor: textDecorationColor ?? this.textDecorationColor,\n      textDecorationStyle: textDecorationStyle ?? this.textDecorationStyle,\n      textDecorationThickness:\n          textDecorationThickness ?? this.textDecorationThickness,\n      textShadow: textShadow ?? this.textShadow,\n      verticalAlign: verticalAlign ?? this.verticalAlign,\n      whiteSpace: whiteSpace ?? this.whiteSpace,\n      width: width ?? this.width,\n      wordSpacing: wordSpacing ?? this.wordSpacing,\n      before: beforeAfterNull == true ? null : before ?? this.before,\n      after: beforeAfterNull == true ? null : after ?? this.after,\n      border: border ?? this.border,\n      alignment: alignment ?? this.alignment,\n      markerContent: markerContent ?? this.markerContent,\n      maxLines: maxLines ?? this.maxLines,\n      textOverflow: textOverflow ?? this.textOverflow,\n      textTransform: textTransform ?? this.textTransform,\n    );\n  }\n\n  Style.fromTextStyle(TextStyle textStyle) {\n    backgroundColor = textStyle.backgroundColor;\n    color = textStyle.color;\n    textDecoration = textStyle.decoration;\n    textDecorationColor = textStyle.decorationColor;\n    textDecorationStyle = textStyle.decorationStyle;\n    textDecorationThickness = textStyle.decorationThickness;\n    fontFamily = textStyle.fontFamily;\n    fontFamilyFallback = textStyle.fontFamilyFallback;\n    fontFeatureSettings = textStyle.fontFeatures;\n    fontSize =\n        textStyle.fontSize != null ? FontSize(textStyle.fontSize!) : null;\n    fontStyle = textStyle.fontStyle;\n    fontWeight = textStyle.fontWeight;\n    letterSpacing = textStyle.letterSpacing;\n    textShadow = textStyle.shadows;\n    wordSpacing = textStyle.wordSpacing;\n    lineHeight = LineHeight(textStyle.height ?? 1.2);\n    textTransform = TextTransform.none;\n  }\n\n  /// Sets any dimensions set to rem or em to the computed size\n  void setRelativeValues(double remValue, double emValue) {\n    if (width?.unit == Unit.rem) {\n      width = Width(width!.value * remValue);\n    } else if (width?.unit == Unit.em) {\n      width = Width(width!.value * emValue);\n    }\n\n    if (height?.unit == Unit.rem) {\n      height = Height(height!.value * remValue);\n    } else if (height?.unit == Unit.em) {\n      height = Height(height!.value * emValue);\n    }\n\n    if (fontSize?.unit == Unit.rem) {\n      fontSize = FontSize(fontSize!.value * remValue);\n    } else if (fontSize?.unit == Unit.em) {\n      fontSize = FontSize(fontSize!.value * emValue);\n    }\n\n    Margin? marginLeft;\n    Margin? marginTop;\n    Margin? marginRight;\n    Margin? marginBottom;\n\n    if (margin?.left?.unit == Unit.rem) {\n      marginLeft = Margin(margin!.left!.value * remValue);\n    } else if (margin?.left?.unit == Unit.em) {\n      marginLeft = Margin(margin!.left!.value * emValue);\n    }\n\n    if (margin?.top?.unit == Unit.rem) {\n      marginTop = Margin(margin!.top!.value * remValue);\n    } else if (margin?.top?.unit == Unit.em) {\n      marginTop = Margin(margin!.top!.value * emValue);\n    }\n\n    if (margin?.right?.unit == Unit.rem) {\n      marginRight = Margin(margin!.right!.value * remValue);\n    } else if (margin?.right?.unit == Unit.em) {\n      marginRight = Margin(margin!.right!.value * emValue);\n    }\n\n    if (margin?.bottom?.unit == Unit.rem) {\n      marginBottom = Margin(margin!.bottom!.value * remValue);\n    } else if (margin?.bottom?.unit == Unit.em) {\n      marginBottom = Margin(margin!.bottom!.value * emValue);\n    }\n\n    margin = margin?.copyWith(\n      left: marginLeft,\n      top: marginTop,\n      right: marginRight,\n      bottom: marginBottom,\n    );\n  }\n}\n\nenum Display {\n  block,\n  inline,\n  inlineBlock,\n  listItem,\n  none,\n}\n\nclass ListStyleType {\n  final String text;\n  final String type;\n  final Widget? widget;\n\n  const ListStyleType(this.text, {this.type = \"marker\", this.widget});\n\n  factory ListStyleType.fromImage(String url) =>\n      ListStyleType(url, type: \"image\");\n\n  factory ListStyleType.fromWidget(Widget widget) =>\n      ListStyleType(\"\", widget: widget, type: \"widget\");\n\n  static const lowerAlpha = ListStyleType(\"LOWER_ALPHA\");\n  static const upperAlpha = ListStyleType(\"UPPER_ALPHA\");\n  static const lowerLatin = ListStyleType(\"LOWER_LATIN\");\n  static const upperLatin = ListStyleType(\"UPPER_LATIN\");\n  static const circle = ListStyleType(\"CIRCLE\");\n  static const disc = ListStyleType(\"DISC\");\n  static const decimal = ListStyleType(\"DECIMAL\");\n  static const lowerRoman = ListStyleType(\"LOWER_ROMAN\");\n  static const upperRoman = ListStyleType(\"UPPER_ROMAN\");\n  static const square = ListStyleType(\"SQUARE\");\n  static const none = ListStyleType(\"NONE\");\n}\n\nenum ListStylePosition {\n  outside,\n  inside,\n}\n\nenum TextTransform {\n  uppercase,\n  lowercase,\n  capitalize,\n  none,\n}\n\nenum VerticalAlign {\n  baseline,\n  sub,\n  sup,\n}\n\nenum WhiteSpace {\n  normal,\n  pre,\n}\n"
        }
    ]
}